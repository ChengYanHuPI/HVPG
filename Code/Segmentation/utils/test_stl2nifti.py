#!/usr/bin/env python
# -*- coding: UTF-8 -*-

import vtk
from vtk.util.numpy_support import vtk_to_numpy, numpy_to_vtk
import numpy as np
import SimpleITK as sitk
import nibabel as nib
import os
import time


def stl2image(stl_file_path, nifti_file_path, save_path):
    """

    Args:
        stl_file_path:
        nifti_file_path:
        save_path:
        other_origin:The origin position of stl data generated by other software may be wrong, other_origin is set to True, and an origin is calculated automatically.
    Returns:

    """
    # Read model files
    reader2 = vtk.vtkSTLReader()
    reader2.SetFileName(stl_file_path)
    reader2.Update()
    surface = reader2.GetOutput()
    # Rewrite the direction matrix (to avoid non-orthogonal errors)
    image_info = nib.load(nifti_file_path)
    qform = image_info.get_qform()
    image_info.set_qform(qform)
    sform = image_info.get_sform()
    image_info.set_sform(sform)
    nib.save(image_info, nifti_file_path)
    # Read nifti files
    reader = sitk.ReadImage(nifti_file_path)
    origin = reader.GetOrigin()
    spacing = reader.GetSpacing()
    dirtection=reader.GetDirection()
    dims = reader.GetSize()
    image_data = sitk.GetArrayFromImage(reader)
    npy_image_data = np.ones_like(image_data)

    # Creating image data
    vtk_image_data = vtk.vtkImageData()
    vtk_image_data.SetSpacing(spacing)
    vtk_image_data.SetOrigin(origin)
    vtk_image_data.SetDimensions(dims[0], dims[1], dims[2])
    vtk_image_data.SetExtent(0, dims[0] - 1, 0, dims[1] - 1, 0, dims[2] - 1)
    vtk_image_data.AllocateScalars(vtk.VTK_UNSIGNED_CHAR, 1)
    vtk_image_data.GetPointData().SetScalars(
        numpy_to_vtk(npy_image_data.ravel(), deep=True, array_type=vtk.VTK_UNSIGNED_CHAR))

    # fill the image with foreground voxel
    pol2stenc = vtk.vtkPolyDataToImageStencil()
    pol2stenc.SetInputData(surface)
    pol2stenc.SetTolerance(0.0)
    pol2stenc.SetOutputOrigin(origin)
    pol2stenc.SetOutputSpacing(spacing)
    pol2stenc.SetOutputWholeExtent(vtk_image_data.GetExtent())
    pol2stenc.Update()
    # cut the corresponding white image and set the background:
    imgstenc = vtk.vtkImageStencil()
    imgstenc.SetInputData(vtk_image_data)
    imgstenc.SetStencilData(pol2stenc.GetOutput())
    imgstenc.ReverseStencilOff()
    imgstenc.SetBackgroundValue(0)
    imgstenc.Update()
    writer = vtk.vtkNIFTIImageWriter()
    writer.SetFileName(save_path)
    writer.SetInputData(imgstenc.GetOutput())
    writer.Write()
    itk_image_data = sitk.ReadImage(save_path)
    itk_image_data.SetOrigin(origin)
    itk_image_data.SetSpacing(spacing)
    itk_image_data.SetDirection(reader.GetDirection())

    sitk.WriteImage(itk_image_data, save_path)



if __name__ == '__main__':
    stl_file_dir = 'D:/source_code/output/test_stl2nifti'
    image_file_path = 'D:/source_code/output/test_stl2nifti/water.nii.gz'
    for file in os.listdir(stl_file_dir):
        if '.stl' not in file:
            continue
        stl_file_path = os.path.join(stl_file_dir, file)

        save_path = stl_file_path.replace('.stl', '22.nii.gz')
        t0 = time.clock()
        stl2image(stl_file_path, image_file_path, save_path)
        print(time.clock() - t0)
